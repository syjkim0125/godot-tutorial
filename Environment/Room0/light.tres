[gd_resource type="VisualShader" load_steps=4 format=3 uid="uid://bnxx1an28ft2x"]

[sub_resource type="VisualShaderNodeColorOp" id="VisualShaderNodeColorOp_7id08"]
operator = 8

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_t8f2b"]
output_port_for_preview = 4
expanded_output_ports = [0]

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_di7i8"]
input_name = "texture"

[resource]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform sampler2D tex_frg_3;



void fragment() {
// Texture2D:3
	vec4 n_out3p0 = texture(tex_frg_3, UV);


	vec3 n_out2p0;
// ColorOp:2
	vec3 n_in2p1 = vec3(0.00000, 0.00000, 0.00000);
	{
		float base = vec3(n_out3p0.xyz).x;
		float blend = n_in2p1.x;
		if (base < 0.5) {
			n_out2p0.x = (base * (2.0 * blend));
		} else {
			n_out2p0.x = (1.0 - (1.0 - base) * (1.0 - 2.0 * (blend - 0.5)));
		}
	}
	{
		float base = vec3(n_out3p0.xyz).y;
		float blend = n_in2p1.y;
		if (base < 0.5) {
			n_out2p0.y = (base * (2.0 * blend));
		} else {
			n_out2p0.y = (1.0 - (1.0 - base) * (1.0 - 2.0 * (blend - 0.5)));
		}
	}
	{
		float base = vec3(n_out3p0.xyz).z;
		float blend = n_in2p1.z;
		if (base < 0.5) {
			n_out2p0.z = (base * (2.0 * blend));
		} else {
			n_out2p0.z = (1.0 - (1.0 - base) * (1.0 - 2.0 * (blend - 0.5)));
		}
	}


// Output:0
	COLOR.rgb = n_out2p0;


}
"
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(1720, 600)
nodes/fragment/2/node = SubResource("VisualShaderNodeColorOp_7id08")
nodes/fragment/2/position = Vector2(1260, 560)
nodes/fragment/3/node = SubResource("VisualShaderNodeTexture_t8f2b")
nodes/fragment/3/position = Vector2(-200, 620)
nodes/fragment/4/node = SubResource("VisualShaderNodeInput_di7i8")
nodes/fragment/4/position = Vector2(-920, 620)
nodes/fragment/connections = PackedInt32Array(4, 0, 3, 2, 3, 0, 2, 0, 2, 0, 0, 0)
